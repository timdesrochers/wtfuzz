import argparse
import os
from PIL import Image
import imagehash


def fuzzy_hash(image_file, hash_size=8):
    image = Image.open(image_file)
    image_hash = imagehash.phash(image, hash_size=hash_size)
    return str(image_hash)


def find_duplicates(directory, threshold, verbose=False, verboser=False):
    image_files = [os.path.join(directory, file) for file in os.listdir(directory) if file.endswith(('jpeg', 'png', 'jpg', 'bmp'))]

    if verbose:
        print(f"Found {len(image_files)} image files in directory {directory}\n")

    hashes = {}
    duplicates = []

    if verboser:
        print("Generating image hashes...\n")

    for image_file in image_files:
        image_hash = fuzzy_hash(image_file)
        if image_hash in hashes:
            hashes[image_hash].append(image_file)
        else:
            hashes[image_hash] = [image_file]

    if verboser:
        print("Finished generating image hashes.\n")
        print(f"Comparing images with threshold value of {threshold}...\n")

    for hash, files in hashes.items():
        if len(files) > 1:
            for i in range(len(files)):
                for j in range(i + 1, len(files)):
                    hash_difference = imagehash.hex_to_hash(str(hash)) - imagehash.hex_to_hash(str(fuzzy_hash(files[j])))
                    if hash_difference <= threshold:
                        if not duplicates:
                            if verboser:
                                print("The following images are likely duplicates:\n")
                            elif verbose:
                                print("Duplicates:\n")
                        if verboser:
                            print(f"Images {files[i]} and {files[j]} are likely duplicates with a hash difference of {hash_difference}.")
                        duplicates.extend([files[i], files[j]])

    if not duplicates:
        print("No duplicates found.")
